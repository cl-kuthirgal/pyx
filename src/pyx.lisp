(in-package #:net.mfiano.lisp.pyx)

(defun initialize (user-args)
  (load-developer-config)
  (start-logging)
  (log:info :pyx.core "Starting ~a..." =title=)
  (load-user-config)
  (setup-repl)
  (initialize-rng)
  (prepare-gamepads)
  (make-display)
  (make-input-data)
  (load-hardware-info)
  (make-thread-pool)
  (initialize-shaders)
  (make-clock)
  (apply #'on-context-create =context= user-args)
  (log:info :pyx.core "Started ~a" =title=)
  (start-loop))

(defun deinitialize ()
  (unwind-protect
       (progn
         (log:info :pyx.core "Shutting down ~a..." =title=)
         (on-context-destroy =context=)
         (shutdown-gamepads)
         (kill-display)
         (destroy-thread-pool)
         (sdl2:quit))
    (stop-logging)
    (log:info :pyx.core "Exited ~a" =title=)
    (reset-config)
    (setf =context= nil)))

(defun process-end-frame-work ()
  (map nil #'funcall (nreverse (end-frame-work)))
  (setf (end-frame-work) nil))

(defun update ()
  (let ((alpha (get-alpha)))
    (do-nodes (node)
      (on-update node))
    (process-end-frame-work)
    (do-nodes (node)
      (resolve-model node alpha))))

(defun physics-update ()
  (do-nodes (node)
    (on-physics-update node)
    (transform-node node))
  (compute-collisions))

(defun periodic-update ()
  (update-repl)
  (process-queue :recompile))

(defun start-loop ()
  (let* ((clock (clock))
         (display (display))
         (input-data (input-data))
         (refresh-rate (display-refresh-rate display)))
    (update)
    (log:debug :pyx.core "Entered main game loop")
    (u:while (running-p)
      (with-continuable "Pyx"
        (handle-events input-data)
        (tick-clock clock refresh-rate #'physics-update #'periodic-update)
        (update)
        (render display)))))

(defun start-engine (context-name &rest user-args)
  (unless (and =context= (running-p))
    (setf =context= (make-context context-name))
    (unwind-protect (initialize user-args)
      (deinitialize))))

(defun stop-engine ()
  (setf (running-p) nil))
