(in-package #:pyx)

(defgeneric collide-p (collider1 collider2)
  (:method (collider1 collider2)))

(defmethod collide-p ((collider1 collider/sphere) (collider2 collider/sphere))
  (<= (v3:distance (transform-point collider1 (collider/center collider1))
                   (transform-point collider2 (collider/center collider2)))
      (+ (v3:length (transform-vector collider1 (v3:vec 1f0 0f0 0f0)))
         (v3:length (transform-vector collider2 (v3:vec 1f0 0f0 0f0))))))

(defun %collide-p/sphere-cuboid (sphere cuboid)
  (let* ((sphere-center (transform-point sphere (collider/center sphere)))
         (point (v3:- (get-closest-point/obb-point (collider/obb cuboid)
                                                   sphere-center)
                      sphere-center)))
    (<= (v3:dot point point)
        (expt (v3:length (transform-vector sphere (v3:vec 1f0 0f0 0f0))) 2))))

(defmethod collide-p ((collider1 collider/sphere) (collider2 collider/cuboid))
  (%collide-p/sphere-cuboid collider1 collider2))

(defmethod collide-p ((collider1 collider/cuboid) (collider2 collider/sphere))
  (%collide-p/sphere-cuboid collider2 collider1))

(defmethod collide-p ((collider1 collider/cuboid) (collider2 collider/cuboid))
  (u:mvlet* ((obb1 (collider/obb collider1))
             (obb2 (collider/obb collider2))
             (r r-abs (make-obb-obb-rotation obb1 obb2)))
    (m3:with-components ((r r) (ar r-abs))
      (v3:with-components ((tr (make-obb-obb-translation obb1 obb2))
                           (h1 (half-widths obb1))
                           (h2 (half-widths obb2)))
        (let ((b (+ (* h2x ar00) (* h2y ar01) (* h2z ar02))))
          (when (> (abs trx) (+ h1x b))
            (return-from collide-p)))
        (let ((b (+ (* h2x ar10) (* h2y ar11) (* h2z ar12))))
          (when (> (abs try) (+ h1y b))
            (return-from collide-p)))
        (let ((b (+ (* h2x ar20) (* h2y ar21) (* h2z ar22))))
          (when (> (abs trz) (+ h1z b))
            (return-from collide-p)))
        (let ((a (+ (* h1x ar00) (* h1y ar10) (* h1z ar20))))
          (when (> (abs (+ (* trx r00) (* try r10) (* trz r20))) (+ a h2x))
            (return-from collide-p)))
        (let ((a (+ (* h1x ar01) (* h1y ar11) (* h1z ar21))))
          (when (> (abs (+ (* trx r01) (* try r11) (* trz r21))) (+ a h2y))
            (return-from collide-p)))
        (let ((a (+ (* h1x ar02) (* h1y ar12) (* h1z ar22))))
          (when (> (abs (+ (* trx r02) (* try r12) (* trz r22))) (+ a h2z))
            (return-from collide-p)))
        (let ((a (+ (* h1y ar20) (* h1z ar10)))
              (b (+ (* h2y ar02) (* h2z ar01))))
          (when (> (abs (- (* trz r10) (* try r20))) (+ a b))
            (return-from collide-p)))
        (let ((a (+ (* h1y ar21) (* h1z ar11)))
              (b (+ (* h2x ar02) (* h2z ar00))))
          (when (> (abs (- (* trz r11) (* try r21))) (+ a b))
            (return-from collide-p)))
        (let ((a (+ (* h1y ar22) (* h1z ar12)))
              (b (+ (* h2x ar01) (* h2y ar00))))
          (when (> (abs (- (* trz r12) (* try r22))) (+ a b))
            (return-from collide-p)))
        (let ((a (+ (* h1x ar20) (* h1z ar00)))
              (b (+ (* h2y ar12) (* h2z ar11))))
          (when (> (abs (- (* trx r20) (* trz r00))) (+ a b))
            (return-from collide-p)))
        (let ((a (+ (* h1x ar21) (* h1z ar01)))
              (b (+ (* h2x ar12) (* h2z ar10))))
          (when (> (abs (- (* trx r21) (* trz r01))) (+ a b))
            (return-from collide-p)))
        (let ((a (+ (* h1x ar22) (* h1z ar02)))
              (b (+ (* h2x ar11) (* h2y ar10))))
          (when (> (abs (- (* trx r22) (* trz r02))) (+ a b))
            (return-from collide-p)))
        (let ((a (+ (* h1x ar10) (* h1y ar00)))
              (b (+ (* h2y ar22) (* h2z ar21))))
          (when (> (abs (- (* try r00) (* trx r10))) (+ a b))
            (return-from collide-p)))
        (let ((a (+ (* h1x ar11) (* h1y ar01)))
              (b (+ (* h2x ar22) (* h2z ar20))))
          (when (> (abs (- (* try r01) (* trx r11))) (+ a b))
            (return-from collide-p)))
        (let ((a (+ (* h1x ar12) (* h1y ar02)))
              (b (+ (* h2x ar21) (* h2y ar20))))
          (when (> (abs (- (* try r02) (* trx r12))) (+ a b))
            (return-from collide-p)))
        t))))
