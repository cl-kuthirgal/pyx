(in-package #:pyx)

(defun register-prefab-viewports (entity &key viewports)
  (let ((viewports-table (table (viewports (get-scene)))))
    (do-nodes (node :parent entity)
      (when (has-component-p node 'render)
        (if viewports
            (dolist (name viewports)
              (let ((viewport (u:href viewports-table name)))
                (register-draw-order viewport node)))
            (dolist (viewport (get-entity-viewports node))
              (register-draw-order viewport node)))))))

(defun load-prefab (name &key viewports parent)
  (let* ((factory (factory (meta :prefabs name)))
         (entity (funcall (func factory) :parent parent)))
    (register-prefab-viewports entity :viewports viewports)))

(defun recompile-prefab (name)
  (dolist (entity (u:href (prefabs (get-scene)) name))
    (let ((parent (node/parent entity)))
      (delete-entity entity)
      (load-prefab name :parent parent))))

(defun deregister-prefab-entity (entity)
  (a:when-let* ((prefab (node/prefab entity))
                (table (prefabs (get-scene))))
    (a:deletef (u:href table prefab) entity)
    (unless (u:href table prefab)
      (remhash prefab table))))

(defun update-prefab-subtree (prefab)
  (parse-prefab prefab)
  (enqueue :recompile (list :prefab (name prefab)))
  (dolist (spec (slaves prefab))
    (let ((slave (meta :prefabs spec)))
      (clrhash (nodes slave))
      (update-prefab-subtree slave))))

(defmacro define-prefab (name options &body body)
  (a:with-gensyms (data)
    (u:mvlet ((body decls doc (a:parse-body body :documentation t)))
      `(let ((,data (preprocess-prefab-data ,name ,options ,body)))
         (unless (meta :prefabs)
           (setf (meta :prefabs) (u:dict #'eq)))
         (if (meta :prefabs ',name)
             (reset-prefab ',name ,data)
             (make-prefab ',name ,data))
         (update-prefab-subtree (meta :prefabs ',name))))))
