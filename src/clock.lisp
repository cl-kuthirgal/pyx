(in-package #:%pyx.clock)

(defstruct (clock (:constructor %make-clock)
                  (:conc-name nil)
                  (:predicate nil)
                  (:copier nil))
  (accumulator 0d0)
  (debug-interval 0.25f0)
  (debug-time 0d0)
  (delta-buffer 0d0)
  (fps/current 0d0)
  (fps/average 0d0)
  (fps/average/10s 0d0)
  (fps/average/30s 0d0)
  (fps/average/60s 0d0)
  (frame-count 0)
  (frame-time 0d0)
  (init-time 0)
  (alpha 0f0)
  (period-elapsed 0d0)
  (period-interval 0.25d0)
  (previous-time 0d0)
  (running-time 0d0))

(defun make-clock ()
  (let ((clock (%make-clock)))
    (setf (init-time clock) (sb-ext:get-time-of-day)
          (running-time clock) (get-time clock))
    (a:when-let ((debug-interval cfg:=debug-interval=))
      (setf (debug-interval clock) debug-interval))
    (setf (ctx:clock) clock)))

(defun get-time (clock)
  (u:mvlet ((s us (sb-ext:get-time-of-day)))
    (+ (- s (init-time clock))
       (/ us 1d6))))

(defun smooth-delta-time (clock refresh-rate)
  (symbol-macrolet ((frame-time (frame-time clock)))
    (incf (frame-time clock) (delta-buffer clock))
    (let ((frame-count (max 1 (truncate (1+ (* frame-time refresh-rate)))))
          (previous frame-time))
      (setf frame-time (/ frame-count refresh-rate)
            (delta-buffer clock) (- previous frame-time)))))

(defun calculate-frame-rate (clock)
  (let* ((time (frame-time clock))
         (fps (/ time))
         (alpha10 (- 1 (exp (- (/ time 10)))))
         (alpha30 (- 1 (exp (- (/ time 30)))))
         (alpha60 (- 1 (exp (- (/ time 60)))))
         (frame-count (frame-count clock)))
    (symbol-macrolet ((average/10s (fps/average/10s clock))
                      (average/30s (fps/average/30s clock))
                      (average/60s (fps/average/60s clock))
                      (average (fps/average clock)))
      (setf (fps/current clock) fps)
      (if (> (running-time clock) 3)
          (setf average/10s (+ (* alpha10 fps) (* (- 1 alpha10) average/10s))
                average/30s (+ (* alpha30 fps) (* (- 1 alpha30) average/30s))
                average/60s (+ (* alpha60 fps) (* (- 1 alpha60) average/60s))
                average (/ (+ fps (* (1- frame-count) average))
                           frame-count))
          (setf average/10s fps
                average/30s fps
                average/60s fps
                average fps)))))

(defun update (clock func)
  (symbol-macrolet ((accumulator (accumulator clock)))
    (incf accumulator (frame-time clock))
    (when (zerop (frame-count clock))
      (funcall func))
    (u:while (>= accumulator cfg:=delta-time=)
      (funcall func)
      (decf accumulator cfg:=delta-time=))
    (setf (alpha clock) (float (/ accumulator cfg:=delta-time=) 1f0))))

(defun update/periodic (clock func)
  (let ((current (running-time clock)))
    (symbol-macrolet ((elapsed (period-elapsed clock)))
      (when (>= (- current elapsed) (period-interval clock))
        (funcall func)
        (setf elapsed current)))))

(defun tick (clock refresh-rate update-func periodic-func)
  (let ((previous (running-time clock))
        (current (get-time clock)))
    (setf (previous-time clock) previous
          (running-time clock) current
          (frame-time clock) (- current previous))
    (if (>= (debug-time clock) (debug-interval clock))
        (setf (debug-time clock) 0d0)
        (incf (debug-time clock) (frame-time clock)))
    (when cfg:=vsync=
      (smooth-delta-time clock refresh-rate))
    (update clock update-func)
    (update/periodic clock periodic-func)
    (calculate-frame-rate clock)))

(defun get-alpha ()
  (alpha (ctx:clock)))

(defun debug-time-p ()
  (zerop (debug-time (ctx:clock))))

(defun get-fps ()
  (let ((clock (ctx:clock)))
    (values (fps/current clock)
            (fps/average clock)
            (fps/average/10s clock)
            (fps/average/30s clock)
            (fps/average/60s clock))))

(defun get-frame-count ()
  (frame-count (ctx:clock)))

(defun get-frame-time ()
  (float (frame-time (ctx:clock)) 1f0))

(defun get-running-time ()
  (running-time (ctx:clock)))
