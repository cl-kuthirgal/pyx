(in-package #:pyx)

(defstruct fps-counter
  (frames/10s 0)
  (frames/30s 0)
  (frames/60s 0)
  (time/10s 0d0)
  (time/30s 0d0)
  (time/60s 0d0)
  (current 0d0)
  (average 0d0)
  (average/10s 0d0)
  (average/30s 0d0)
  (average/60s 0d0))

(defstruct (clock (:constructor %make-clock)
                  (:predicate nil)
                  (:copier nil))
  (accumulator 0d0)
  (delta-buffer 0d0)
  (delta-time (/ 60f0))
  (frame-count 0)
  (frame-time 0d0)
  (init-time 0)
  (interpolation-factor 0f0)
  (pause-time 0d0)
  (period-elapsed 0d0)
  (period-interval 0.25d0)
  (previous-time 0d0)
  (start-time 0d0)
  (total-time 0d0)
  (fps-counter (make-fps-counter)))

(defun make-clock ()
  (let ((clock (%make-clock)))
    (setf (clock-init-time clock) (sb-ext:get-time-of-day)
          (clock-total-time clock) 0d0
          (clock-start-time clock) 0d0
          (slot-value *state* '%clock) clock)
    (map-nodes #'resolve-model)
    (u:noop)))

(defun get-time (clock)
  (u:mvlet ((s us (sb-ext:get-time-of-day)))
    (+ (- s (clock-init-time clock))
       (/ us 1d6))))

(defun smooth-delta-time (clock refresh-rate)
  (symbol-macrolet ((frame-time (clock-frame-time clock))
                    (buffer (clock-delta-buffer clock)))
    (incf frame-time buffer)
    (let ((frame-count (max 1 (truncate (1+ (* frame-time refresh-rate)))))
          (previous frame-time))
      (setf frame-time (/ frame-count refresh-rate)
            buffer (- previous frame-time))
      (u:noop))))

(defun calculate-frame-rate (clock)
  (let ((fps (clock-fps-counter clock))
        (time (clock-frame-time clock)))
    (symbol-macrolet ((frames/10s (fps-counter-frames/10s fps))
                      (frames/30s (fps-counter-frames/30s fps))
                      (frames/60s (fps-counter-frames/60s fps))
                      (time/10s (fps-counter-time/10s fps))
                      (time/30s (fps-counter-time/30s fps))
                      (time/60s (fps-counter-time/60s fps))
                      (average/10s (fps-counter-average/10s fps))
                      (average/30s (fps-counter-average/30s fps))
                      (average/60s (fps-counter-average/60s fps)))
      (incf frames/10s)
      (incf frames/30s)
      (incf frames/60s)
      (incf time/10s time)
      (incf time/30s time)
      (incf time/60s time)
      (setf (fps-counter-current fps) (/ time)
            (fps-counter-average fps) (/ (clock-frame-count clock)
                                         (clock-total-time clock)))
      (when (>= time/10s 10)
        (setf average/10s (/ frames/10s time/10s)
              frames/10s 0
              time/10s 0d0))
      (when (>= time/30s 30)
        (setf average/30s (/ frames/30s time/30s)
              frames/30s 0
              time/30s 0d0))
      (when (>= time/60s 60)
        (setf average/60s (/ frames/60s time/60s)
              frames/60s 0
              time/60s 0d0)))))

(defun clock-update (update-func)
  (let* ((clock (clock *state*))
         (delta (clock-delta-time clock)))
    (symbol-macrolet ((accumulator (clock-accumulator clock))
                      (interpolation-factor (clock-interpolation-factor clock)))
      (incf accumulator (clock-frame-time clock))
      (u:while (>= accumulator delta)
        (funcall update-func)
        (decf accumulator delta))
      (setf interpolation-factor (float (/ accumulator delta) 1f0))
      (u:noop))))

(defun clock-update/periodic ()
  (let* ((clock (clock *state*))
         (total (clock-total-time clock)))
    (symbol-macrolet ((elapsed (clock-period-elapsed clock)))
      (when (>= (- total elapsed) (clock-period-interval clock))
        (run-periodic-tasks)
        (setf elapsed total))
      (u:noop))))

(defun clock-tick (update-func)
  (let ((clock (clock *state*))
        (refresh-rate (refresh-rate (display *state*))))
    (let* ((pause (clock-pause-time clock))
           (previous (+ (clock-total-time clock) pause))
           (total (- (get-time clock) pause)))
      (setf (clock-previous-time clock) previous
            (clock-total-time clock) total
            (clock-frame-time clock) (- total previous)
            (clock-pause-time clock) 0d0))
    (when (cfg :vsync)
      (smooth-delta-time clock refresh-rate))
    (clock-update update-func)
    (clock-update/periodic)
    (calculate-frame-rate clock)
    (u:noop)))

;;; Public API

(defun get-total-time ()
  (clock-total-time (clock *state*)))

(defun get-frame-count ()
  (clock-frame-count (clock *state*)))

(defun get-fps ()
  (let ((fps (clock-fps-counter (clock *state*))))
    (values (fps-counter-current fps)
            (fps-counter-average fps)
            (fps-counter-average/10s fps)
            (fps-counter-average/30s fps)
            (fps-counter-average/60s fps))))
