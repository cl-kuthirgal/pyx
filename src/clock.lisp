(in-package #:pyx)

(defstruct (clock (:constructor %make-clock)
                  (:predicate nil)
                  (:copier nil))
  (accumulator 0d0)
  (debug-interval 0.25f0)
  (debug-time 0d0)
  (delta-buffer 0d0)
  (delta-time (/ 60f0))
  (fps/current 0d0)
  (fps/average 0d0)
  (fps/average/10s 0d0)
  (fps/average/30s 0d0)
  (fps/average/60s 0d0)
  (frame-count 0)
  (frame-time 0d0)
  (init-time 0)
  (interpolation-factor 0f0)
  (pause-time 0d0)
  (period-elapsed 0d0)
  (period-interval 0.25d0)
  (previous-time 0d0)
  (start-time 0d0)
  (total-time 0d0))

(defun make-clock ()
  (let ((clock (%make-clock)))
    (setf (clock-init-time clock) (sb-ext:get-time-of-day)
          (clock-total-time clock) 0d0
          (clock-start-time clock) 0d0
          (slot-value *state* '%clock) clock)
    (a:when-let ((debug-interval cfg:=DEBUG-INTERVAL=))
      (setf (clock-debug-interval clock) debug-interval))
    (map-nodes #'resolve-model)
    (u:noop)))

(defun get-time (clock)
  (u:mvlet ((s us (sb-ext:get-time-of-day)))
    (+ (- s (clock-init-time clock))
       (/ us 1d6))))

(defun smooth-delta-time (clock refresh-rate)
  (symbol-macrolet ((frame-time (clock-frame-time clock))
                    (buffer (clock-delta-buffer clock)))
    (incf frame-time buffer)
    (let ((frame-count (max 1 (truncate (1+ (* frame-time refresh-rate)))))
          (previous frame-time))
      (setf frame-time (/ frame-count refresh-rate)
            buffer (- previous frame-time))
      (u:noop))))

(defun calculate-frame-rate (clock)
  (let* ((time (clock-frame-time clock))
         (fps (/ time))
         (alpha10 (- 1 (exp (- (/ time 10)))))
         (alpha30 (- 1 (exp (- (/ time 30)))))
         (alpha60 (- 1 (exp (- (/ time 60)))))
         (frame-count (clock-frame-count clock)))
    (symbol-macrolet ((average/10s (clock-fps/average/10s clock))
                      (average/30s (clock-fps/average/30s clock))
                      (average/60s (clock-fps/average/60s clock))
                      (average (clock-fps/average clock)))
      (setf (clock-fps/current clock) fps)
      (if (> (clock-total-time clock) 3)
          (setf average/10s (+ (* alpha10 fps) (* (- 1 alpha10) average/10s))
                average/30s (+ (* alpha30 fps) (* (- 1 alpha30) average/30s))
                average/60s (+ (* alpha60 fps) (* (- 1 alpha60) average/60s))
                average (/ (+ fps (* (1- frame-count) average))
                           frame-count))
          (setf average/10s fps
                average/30s fps
                average/60s fps
                average fps)))))

(defun clock-update (update-func)
  (let* ((clock (clock *state*))
         (delta (clock-delta-time clock)))
    (symbol-macrolet ((accumulator (clock-accumulator clock))
                      (interpolation-factor (clock-interpolation-factor clock)))
      (incf accumulator (clock-frame-time clock))
      (u:while (>= accumulator delta)
        (funcall update-func)
        (decf accumulator delta))
      (setf interpolation-factor (float (/ accumulator delta) 1f0))
      (u:noop))))

(defun clock-update/periodic ()
  (let* ((clock (clock *state*))
         (total (clock-total-time clock)))
    (symbol-macrolet ((elapsed (clock-period-elapsed clock)))
      (when (>= (- total elapsed) (clock-period-interval clock))
        (run-periodic-tasks)
        (setf elapsed total))
      (u:noop))))

(defun clock-tick (update-func)
  (let* ((clock (clock *state*))
         (refresh-rate (refresh-rate (display *state*)))
         (pause (clock-pause-time clock))
         (previous (+ (clock-total-time clock) pause))
         (total (- (get-time clock) pause)))
    (setf (clock-previous-time clock) previous
          (clock-total-time clock) total
          (clock-frame-time clock) (- total previous)
          (clock-pause-time clock) 0d0)
    (if (>= (clock-debug-time clock) (clock-debug-interval clock))
        (setf (clock-debug-time clock) 0d0)
        (incf (clock-debug-time clock) (clock-frame-time clock)))
    (when cfg:=VSYNC=
      (smooth-delta-time clock refresh-rate))
    (clock-update update-func)
    (clock-update/periodic)
    (calculate-frame-rate clock)
    (u:noop)))

;;; Internal API

(defun debug-time-p ()
  (zerop (clock-debug-time (clock *state*))))

;;; Public API

(defun get-total-time ()
  (clock-total-time (clock *state*)))

(defun get-frame-count ()
  (clock-frame-count (clock *state*)))

(defun get-fps ()
  (let ((clock (clock *state*)))
    (values (clock-fps/current clock)
            (clock-fps/average clock)
            (clock-fps/average/10s clock)
            (clock-fps/average/30s clock)
            (clock-fps/average/60s clock))))
